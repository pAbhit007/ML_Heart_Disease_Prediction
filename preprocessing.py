# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rKE2Eys-pvvdzXkERV03bbOzdtDmjWZP
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.impute import SimpleImputer

def preprocess(df, option):
    # Defining the map function
    def binary_map(feature):
        return feature.map({'Yes': 1, 'No': 0})

    # Encode binary categorical features
    binary_list = ['Smoking', 'AlcoholDrinking', 'Stroke', 'DiffWalking', 'Sex', 'Diabetic', 'PhysicalActivity', 'Asthma', 'KidneyDisease', 'SkinCancer']
    df[binary_list] = df[binary_list].apply(binary_map)

    # Handle 'AgeCategory' column using label encoding
    if 'AgeCategory' in df.columns:
        le_age = LabelEncoder()
        df['AgeCategory'] = le_age.fit_transform(df['AgeCategory'])

    # Handle 'Race' column using label encoding
    if 'Race' in df.columns:
        le_race = LabelEncoder()
        df['Race'] = le_race.fit_transform(df['Race'])

    # Handle 'GenHealth' column using label encoding
    if 'GenHealth' in df.columns:
        le_genhealth = LabelEncoder()
        df['GenHealth'] = le_genhealth.fit_transform(df['GenHealth'])

    # Create an imputer to handle missing values (NaNs)
    imputer = SimpleImputer(strategy='median')  # You can choose another strategy if needed

    # Apply the imputer to fill missing values in numeric columns
    numeric_cols = ['BMI', 'PhysicalHealth', 'MentalHealth', 'SleepTime']
    df[numeric_cols] = imputer.fit_transform(df[numeric_cols])

    # Drop values based on operational options
    if option == "Online":
        columns = ['HeartDisease', 'BMI', 'Smoking', 'AlcoholDrinking', 'Stroke', 'PhysicalHealth', 'MentalHealth', 'DiffWalking', 'Sex', 'AgeCategory', 'Race', 'Diabetic', 'PhysicalActivity', 'GenHealth', 'SleepTime', 'Asthma', 'KidneyDisease', 'SkinCancer']
        # Encoding the other categorical features with more than two categories
        df = pd.get_dummies(df).reindex(columns=columns, fill_value=0)
    elif option == "Batch":
        df = df[['HeartDisease', 'BMI', 'Smoking', 'AlcoholDrinking', 'Stroke', 'PhysicalHealth', 'MentalHealth', 'DiffWalking', 'Sex', 'AgeCategory', 'Race', 'Diabetic', 'PhysicalActivity', 'GenHealth', 'SleepTime', 'Asthma', 'KidneyDisease', 'SkinCancer']]
        columns = ['HeartDisease', 'BMI', 'Smoking', 'AlcoholDrinking', 'Stroke', 'PhysicalHealth', 'MentalHealth', 'DiffWalking', 'Sex', 'AgeCategory', 'Race', 'Diabetic', 'PhysicalActivity', 'GenHealth', 'SleepTime', 'Asthma', 'KidneyDisease', 'SkinCancer']
        # Encoding the other categorical features with more than two categories
        df = pd.get_dummies(df).reindex(columns=columns, fill_value=0)
    else:
        print("Incorrect operational options")

    # Feature scaling
    sc = MinMaxScaler()
    # Apply scaling to relevant columns
    columns_to_scale = ['BMI', 'PhysicalHealth', 'MentalHealth', 'SleepTime']
    df[columns_to_scale] = sc.fit_transform(df[columns_to_scale])
    return df