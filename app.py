# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YZcvHzQx_1QcOSlQcdgF_oIyWZrN5h7o
"""



import streamlit as st
import pandas as pd
from PIL import Image
import joblib
from sklearn.impute import SimpleImputer
from preprocessing import preprocess

# Load the model from disk
knn_model = joblib.load(r"knn_model.sav")

def main():
    # Setting Application title
    st.title('Heart Disease Prediction App')

    # Setting Application description
    st.markdown("""
     :dart:  This Streamlit app is made to predict heart disease based on patient's health data.
    The application is functional for both online prediction and batch data prediction.
    """)

    # Setting Application sidebar default
    image = Image.open('App.jpeg')
    add_selectbox = st.sidebar.selectbox(
        "How would you like to predict?", ("Online", "Batch"))
    st.sidebar.info('This app is created to predict Heart Disease')
    st.sidebar.image(image)

    if add_selectbox == "Online":
        st.info("Input data below")
        st.subheader("Patient's Health Data")
        age = st.number_input('Age:', min_value=0, max_value=100, value=0)
        sex = st.selectbox('Sex:', ('Male', 'Female'))
        age_category = st.selectbox('Age Category:', ('18-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-64', '65-69', '70-74', '75-79', '80 or older'))
        race = st.selectbox('Race:', ('Hispanic', 'White', 'Black', 'Asian', 'Other'))
        diabetic = st.selectbox('Diabetic:', ('Yes', 'No'))
        physical_activity = st.selectbox('Physical Activity:', ('Yes', 'No'))
        gen_health = st.selectbox('General Health:', ('Excellent', 'Very good', 'Good', 'Fair', 'Poor'))
        sleep_time = st.number_input('Sleep Time (hours):', min_value=0, max_value=24, value=0)
        asthma = st.selectbox('Asthma:', ('Yes', 'No'))
        kidney_disease = st.selectbox('Kidney Disease:', ('Yes', 'No'))
        skin_cancer = st.selectbox('Skin Cancer:', ('Yes', 'No'))
        bmi = st.number_input('BMI:', min_value=0, max_value=100, value=0)
        smoking = st.selectbox('Smoking:', ('Yes', 'No'))
        alcohol_drinking = st.selectbox('Alcohol Drinking:', ('Yes', 'No'))
        stroke = st.selectbox('Stroke:', ('Yes', 'No'))
        physical_health = st.number_input('Physical Health:', min_value=0.0, max_value=30.0, value=0.0)
        mental_health = st.number_input('Mental Health:', min_value=0.0, max_value=30.0, value=0.0)
        diff_walking = st.selectbox('Difficulty Walking:', ('Yes', 'No'))

        data = {
            'Age': age,
            'Sex': sex,
            'AgeCategory': age_category,
            'Race': race,
            'Diabetic': diabetic,
            'PhysicalActivity': physical_activity,
            'GenHealth': gen_health,
            'SleepTime': sleep_time,
            'Asthma': asthma,
            'KidneyDisease': kidney_disease,
            'SkinCancer': skin_cancer,
            'BMI': bmi,
            'Smoking': smoking,
            'AlcoholDrinking': alcohol_drinking,
            'Stroke': stroke,
            'PhysicalHealth': physical_health,
            'MentalHealth': mental_health,
            'DiffWalking': diff_walking
        }
        features_df = pd.DataFrame.from_dict([data])

        st.markdown("<h3></h3>", unsafe_allow_html=True)
        st.write('Overview of input data:')
        st.markdown("<h3></h3>", unsafe_allow_html=True)
        st.dataframe(features_df)

        # Preprocess inputs
        imputer = SimpleImputer(strategy='median')
        imputer.fit(features_df[['Age', 'BMI', 'SleepTime', 'PhysicalHealth', 'MentalHealth']])
        features_df[['Age', 'BMI', 'SleepTime', 'PhysicalHealth', 'MentalHealth']] = imputer.transform(features_df[['Age', 'BMI', 'SleepTime', 'PhysicalHealth', 'MentalHealth']])
        preprocess_df = preprocess(features_df, 'Online')

        prediction = knn_model.predict(preprocess_df)

        if st.button('Predict'):
            if prediction[0] == 1:
                st.warning('Yes, the patient is predicted to have heart disease.')
            else:
                st.success('No, the patient is predicted to be healthy.')

    else:
        st.subheader("Dataset upload")
        uploaded_file = st.file_uploader("Choose a file")
        if uploaded_file is not None:
            data = pd.read_csv(uploaded_file)
            # Get overview of data
            st.write(data.head())
            st.markdown("<h3></h3>", unsafe_allow_html=True)
            # Preprocess inputs
            preprocess_df = preprocess(data, 'Batch')

            if st.button('Predict'):
                # Get batch prediction
                prediction = knn_model.predict(preprocess_df)
                prediction_df = pd.DataFrame(prediction, columns=["Predictions"])
                prediction_df = prediction_df.replace({1: 'Yes, the patient is predicted to have heart disease.',
                                                      0: 'No, the patient is predicted to be healthy.'})

                st.markdown("<h3></h3>", unsafe_allow_html=True)
                st.subheader('Prediction')
                st.write(prediction_df)

if __name__ == '__main__':
    main()